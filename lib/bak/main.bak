import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:speech_to_text/speech_to_text.dart';
import 'package:go_router/go_router.dart';
import '../settings_page.dart';
import '../about_page.dart';
import 'package:notifications/notifications.dart';
import 'package:flutter_tts/flutter_tts.dart';
import 'dart:async'; // Needed for StreamSubscription!!!!
import 'package:audioplayers/audioplayers.dart';
import 'package:googleai_dart/googleai_dart.dart';

StreamSubscription<NotificationEvent>? _subscription; // Declare _subscription at the top-level
FlutterTts flutterTts = FlutterTts();

void checkMicrophonePermission() async {
  PermissionStatus permission = await Permission.microphone.status;

  if (!permission.isGranted) {
    await Permission.microphone.request();
  }
}

////////////////////////////////////////////////////////
//TODO: Add button to stop notification listening etc.
////////////////////////////////////////////////////////

void main() {
  runApp(const MyApp());
  checkMicrophonePermission();
  startListeningNotifications();
}

List<String> blockedPhrases = [
  "Tap to see your song history",
  //TODO: Add more phrases
];

bool containsBlockedPhrase(String text) {
  for (String phrase in blockedPhrases) {
    if (text.contains(phrase)) {
      return true; // Found a blocked phrase
    }
  }
  return false; // No blocked phrases found
}

void onData(NotificationEvent event) {
  String notificationText = "${event.title}: ${event.message}";
  // Check if the notificationText contains any blocked phrases
  if (containsBlockedPhrase(notificationText)) {
    print("Not read, because on blocklist: " + notificationText);
  } else {
    print(notificationText);
    AudioPlayer().play(AssetSource('audio/notification.mp3'));
    flutterTts.setSilence(1500);
    flutterTts.setLanguage("de-DE"); // TODO: Make this dynamic
    flutterTts.speak(notificationText);
  }
}

void startListeningNotifications() {
  Notifications notifications = Notifications();
  try {
    _subscription = notifications.notificationStream?.listen(onData);
    print("Listening for notifications");
  } on NotificationException catch (exception) {
    print(exception);
  }
}

void stopListeningNotifications() {
  _subscription?.cancel();
  print("Stopped listening for notifications");
}

//////////////
//VARIABLES//
/////////////

final googleaiApiKey = 'AIzaSyDpZ5mGDmmGyVl1a0rAQqfsVdyY00rM8HI'; //TODO: If this will be published, remember to obfuscate API Key
final client = GoogleAIClient(apiKey: googleaiApiKey);

String _appname = Variables().getAppName();
String _magicWord = Variables().getMagicWord();
String _version = Variables().getVersion();
String _creator = Variables().getCreator();

class MyApp extends StatefulWidget {
  const MyApp({Key? key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  int _currentIndex = 0; // Add this line

  @override
  Widget build(BuildContext context) {
    return MaterialApp.router(
      title: _appname,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepOrangeAccent),
        useMaterial3: true,
      ),
      darkTheme: ThemeData.dark().copyWith(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepOrangeAccent),
        useMaterial3: true,
      ),
      routerConfig: _router,
    );
  }
}

final _router = AppRouter()._router;

class Variables {
  String _appName = 'Vision Help';
  String _magicWord = 'Assistant';
  String _version = '0.0.4 Alpha';
  String _creator = 'vncntwww';
  String _selectedLanguage = 'Deutsch'; 

  String getAppName() {
    return _appName;
  }
  String getMagicWord() {
    return _magicWord;
  }
  String getVersion() {
    return _version;
  }
  String getCreator() {
    return _creator;
  }
  String getSelectedLanguage() {
    return _selectedLanguage;
  }
}

class AppRouter {
  Variables vars = Variables();

  final GoRouter _router = GoRouter(
    routes: <GoRoute>[
      GoRoute(
        path: '/',
        builder: (BuildContext context, GoRouterState state) {
          return MyHomePage(
            title: Variables().getAppName(),  // This was the issue
            currentIndex: 0,
            onTap: (index) {
              // Handle tap on the home page
            },
          );
        },
      ),
      GoRoute(
        path: '/settings',
        builder: (BuildContext context, GoRouterState state) => SettingsPage(
          selectedLanguage: Variables().getSelectedLanguage(),
          onLanguageChanged: (String newLanguage) {
            // Handle language change
          },
        ),
      ),
      GoRoute(
        path: '/about',
        builder: (BuildContext context, GoRouterState state) => AboutPage(
          appName: Variables().getAppName(),
          version: Variables().getVersion(),  // Accessing other variables from Variables class
          creator: Variables().getCreator(),  // Accessing other variables from Variables class
          selectedLanguage: Variables().getSelectedLanguage(),
          onLanguageChanged: (String newLanguage) {
            
          },
        ),
      ),
    ],
  );
}


class MyHomePage extends StatefulWidget {
  const MyHomePage(
      {Key? key,
      required this.title,
      required this.currentIndex,
      required this.onTap});

  final String title;
  final int currentIndex;
  final ValueChanged<int> onTap;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _animation;

  int currentPageIndex = 0;

  final SpeechToText _speechToText = SpeechToText();
  bool _speechEnabled = false;
  String _wordsSpoken = "";
  String _geminiResponse = "";
  double _confidenceLevel = 0;
  String _selectedLanguage = 'Deutsch'; // Default language

  void initSpeech() async {
    _speechEnabled = await _speechToText.initialize();
    setState(() {});
    print("Before Init");
    //_listenForMagicWord();
    print("After Init");
  }

  Future<void> generateGemini(String askgemini) async {
  print("generateGemini called");
  final res = await client.generateContent(
    modelId: 'gemini-pro',
    request: GenerateContentRequest(
      contents: [
        Content(
          parts: [
            Part(text: askgemini),
          ],
        ),
      ],
      generationConfig: GenerationConfig(
        temperature: 0.8,
      ),
    ),
  );
  _geminiResponse = res.candidates?.first.content?.parts?.first.text ?? "";
  print("[GEMINI] GEMINI responded: " + _geminiResponse);
}

//TODO: THE ABOVE CODE IS NOT WORKING CORRECTLY YET. IT ALWAYS RETURNS THE RESPONSE FROM THE LAST QUESTION, NOT THE CURRENT ONE. FIX THIS!

  void _startListening() async {
    await _speechToText.listen(
      onResult: _onSpeechResult,
      localeId: _getLocaleId(_selectedLanguage),
    );
    setState(() {
      _confidenceLevel = 0;
    });
  }

  void _listenForMagicWord() {
    print("Staring to listen");
    // Listen for the magic word continuously
    _speechToText.listen(
      onResult: (result) {
        if (result.finalResult) {
          print("Got result");
          // Check if the magic word is spoken
          if (result.recognizedWords.toLowerCase() ==
              _magicWord.toLowerCase()) {
            // Activate speech-to-text listening when the magic word is detected
            print("Result is magic word");
            _startListening();
          } else {
            print("Result is not magic word");
          }
        }

        // Always listen again, regardless of whether it's the final result or not
        //print("Listening again");
        //_listenForMagicWord();
      },
      localeId: _getLocaleId(_selectedLanguage),
      listenMode: ListenMode.dictation,
    );
  }

  void speakGeminiContent() async {
    generateGemini(_wordsSpoken); //Using Gemini to ask it about the input
    flutterTts.setLanguage("de-DE"); // TODO: Make this dynamic
    flutterTts.speak(_geminiResponse);
  }

  void _stopListening() async {
    await _speechToText.stop();
    speakGeminiContent();
  }

  String _getLocaleId(String language) {
    // Implement logic to map language to localeId
    // You may use a Map or another data structure for this
    switch (language) {
      case 'Deutsch':
        return 'de_DE';
      case 'English':
        return 'en_US';
      // Add more cases for other languages
      default:
        return 'de_DE'; // Default to English
    }
  }

  void _onSpeechResult(result) {
    setState(() {
      _wordsSpoken = "${result.recognizedWords}";
      _confidenceLevel = result.confidence;
    });
  }

  @override
  void initState() {
    super.initState();
    initSpeech();

    _animationController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 500),
    );

    _animation = Tween<double>(begin: 100.0, end: 120.0).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: Curves.easeInOut,
      ),
    );

    _animationController.addListener(() {
      setState(() {});
    });
  }

  void _navigateToAboutPage() {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => AboutPage(
          appName: _appname,
          version: _version,
          creator: _creator,
          selectedLanguage: _selectedLanguage,
          onLanguageChanged: (String newLanguage) {
            setState(() {
              _selectedLanguage = newLanguage;
            });
          },
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text(widget.title),
      ),
      body: Stack(
        alignment: Alignment.center,
        children: [
          Container(
            margin:
                EdgeInsets.only(top: 20.0), // Adjust the top margin as needed
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              crossAxisAlignment: CrossAxisAlignment.center,
              children: <Widget>[
                Text(
                  'Halte das Mikrofon gedrückt oder sage das magische Wort (${_magicWord}):',
                  style: const TextStyle(fontSize: 15),
                  textAlign: TextAlign.center,
                ),
                Text(
                  _speechToText.isListening
                      ? "listening..."
                      : _speechEnabled
                          ? "Halte das Mikrofon, um zu starten"
                          : "Ein Fehler ist aufgetreten",
                  style: const TextStyle(fontSize: 20),
                ),
                Expanded(
                  child: Container(
                    child: Text(_wordsSpoken),
                  ),
                ),
                if (_speechToText.isNotListening && _confidenceLevel > 0)
                  Text(
                    "Confidence: ${(_confidenceLevel * 100).toStringAsFixed(1)}%",
                    style: TextStyle(
                      fontSize: 10,
                      fontWeight: FontWeight.w200,
                    ),
                  ),
                const SizedBox(height: 30),
              ],
            ),
          ),
          GestureDetector(
            onLongPressStart: (details) {
              _animationController.forward();
              _speechToText.isListening ? _stopListening : _startListening;
              HapticFeedback.lightImpact();
              _startListening();
            },
            onLongPressEnd: (details) {
              _animationController.reverse();
              _speechToText.stop();
              HapticFeedback.lightImpact();
              _stopListening();
            },
            child: AnimatedBuilder(
              animation: _animation,
              builder: (context, child) {
                return Container(
                  padding: const EdgeInsets.all(16),
                  decoration: const BoxDecoration(
                    shape: BoxShape.circle,
                    color: Colors.deepOrange,
                  ),
                  child: Icon(
                    Icons.mic,
                    size: _animation.value,
                    color: Colors.white,
                  ),
                );
              },
            ),
          ),
        ],
      ),
      bottomNavigationBar: NavigationBar(
        onDestinationSelected: (int index) {
          setState(() {
            currentPageIndex = index;
          });

          if (index == 0) {
            HapticFeedback.lightImpact();
            context.go('/');
          } else if (index == 1) {
            HapticFeedback.lightImpact();
            context.go('/settings');
          } else if (index == 2) {
            HapticFeedback.lightImpact();
            context.go('/about');
          }
        },
        indicatorColor: Colors.deepOrangeAccent,
        selectedIndex: currentPageIndex,
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        destinations: const <Widget>[
          NavigationDestination(
            selectedIcon: Icon(Icons.home),
            icon: Icon(Icons.home_outlined),
            label: 'Home',
          ),
          NavigationDestination(
            icon: Icon(Icons.settings),
            label: 'Einstellungen',
          ),
          NavigationDestination(
            icon: Icon(Icons.info),
            label: 'Über',
          ),
        ],
      ),
    );
  }
}
